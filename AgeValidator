import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

class CustomAgeException extends Exception {
    public CustomAgeException(String message) {
        super(message);
    }
}

// Основной класс программы
public class AgeValidator {
    private static final Logger logger = Logger.getLogger(AgeValidator.class.getName());

    static {
        try {
            // Настройка логгера с обработчиком, который записывает в файл
            FileHandler fileHandler = new FileHandler("exceptions.log", true); // true - для добавления в файл, а не перезаписи
            fileHandler.setFormatter(new SimpleFormatter()); // Простой текстовый формат для записи
            logger.addHandler(fileHandler);
            logger.setUseParentHandlers(false); // Отключаем вывод в консоль
        } catch (IOException e) {
            System.out.println("Не удалось настроить логгер: " + e.getMessage());
        }
    }

    public static void checkAge(int age) throws CustomAgeException {
        if (age < 0 || age > 120) {
            // Выбрасываем CustomAgeException с сообщением об ошибке
            throw new CustomAgeException("Недопустимый возраст: " + age + ". Возраст должен быть от 0 до 120.");
        } else {
            System.out.println("Возраст " + age + " принят.");
        }
    }

    public static void main(String[] args) {
        int[] testAges = {25, -5, 130, 45};
        for (int age : testAges) {
            try {
                checkAge(age);
            } catch (CustomAgeException e) {
                // Обрабатываем выброшенное исключение и логируем его в файл
                System.out.println("Ошибка: " + e.getMessage());
                logger.severe("Выброшено исключение: " + e.getMessage()); // Логируем информацию об исключении
            }
        }
    }
}
